import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

public class AdminFeatures {

    private static final String DB_URL = "jdbc:sqlite:database/security_logs.db";

    // Method to view all access logs
    public static void viewAllLogs() {
        StringBuilder logs = new StringBuilder();
        executeQuery("SELECT * FROM AccessLogs", rs -> {
            logs.append(displayLog(rs)).append("\n");
        });
        JOptionPane.showMessageDialog(null, logs.toString(), "All Access Logs", JOptionPane.INFORMATION_MESSAGE);
    }

    // Method to delete a user by username
    public static boolean deleteUser(String username) {
        return executeUpdate("DELETE FROM Users WHERE username = ?", username);
    }

    // Method to view all users
    public static void viewAllUsers() {
        StringBuilder users = new StringBuilder();
        executeQuery("SELECT * FROM Users", rs -> {
            users.append("User ID: ").append(rs.getInt("id"))
                .append(", Username: ").append(rs.getString("username"))
                .append(", Role: ").append(rs.getString("role"))
                .append("\n");
        });
        JOptionPane.showMessageDialog(null, users.toString(), "All Users", JOptionPane.INFORMATION_MESSAGE);
    }

    public static ResultSet getAllUsers() {
        String sql = "SELECT * FROM Users";
        try {
            Connection conn = DriverManager.getConnection(DB_URL);
            PreparedStatement pstmt = conn.prepareStatement(sql);
            return pstmt.executeQuery();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error retrieving users: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }
    
    // Method to add a new user
    public static void addUser(String username, String password, String role) {
        String hashedPassword = AuthManager.hashPassword(password);
        executeUpdate("INSERT INTO Users(username, password, role) VALUES(?, ?, ?)", username, hashedPassword, role);
        JOptionPane.showMessageDialog(null, "User added successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    // Method to update a user's role
    public static boolean updateUserRole(String username, String newRole) {
        return executeUpdate("UPDATE Users SET role = ? WHERE username = ?", newRole, username);
    }

    // Filter logs by user
    public static void filterLogsByUser(String username) {
        StringBuilder logs = new StringBuilder();
        String sql = "SELECT * FROM AccessLogs WHERE user_id = (SELECT id FROM Users WHERE username = ?)";
        executeQuery(sql, rs -> logs.append(displayLog(rs)).append("\n"), username);
        JOptionPane.showMessageDialog(null, logs.toString(), "Logs Filtered by User", JOptionPane.INFORMATION_MESSAGE);
    }

    public static void filterLogsByActionType(String action) {
        StringBuilder logs = new StringBuilder();
        String sql = "SELECT * FROM AccessLogs WHERE UPPER(action) = UPPER(?)";
        executeQuery(sql, rs -> logs.append(displayLog(rs)).append("\n"), action);
        JOptionPane.showMessageDialog(null, logs.toString(), "Logs Filtered by Action Type", JOptionPane.INFORMATION_MESSAGE);
    }

    public static void displayLoginStatistics() {
        String sql = "SELECT DATE(access_time) AS login_date, " +
                     "SUM(CASE WHEN status = 'Success' THEN 1 ELSE 0 END) AS successful_logins, " +
                     "SUM(CASE WHEN status = 'Failed' THEN 1 ELSE 0 END) AS failed_logins " +
                     "FROM AccessLogs " +
                     "WHERE action = 'Login' " +
                     "GROUP BY login_date " +
                     "ORDER BY login_date DESC";
        
        StringBuilder stats = new StringBuilder();
        executeQuery(sql, rs -> {
            stats.append("Date: ").append(rs.getString("login_date"))
                 .append(" - Successful Logins: ").append(rs.getInt("successful_logins"))
                 .append(" - Failed Logins: ").append(rs.getInt("failed_logins"))
                 .append("\n");
        });
        JOptionPane.showMessageDialog(null, stats.toString(), "Login Statistics", JOptionPane.INFORMATION_MESSAGE);
    }
    
    public static void displayMostActiveUsers() {
        StringBuilder users = new StringBuilder();
        String sql = "SELECT Users.username, COUNT(*) AS login_count " +
                     "FROM AccessLogs " +
                     "JOIN Users ON AccessLogs.user_id = Users.id " +
                     "WHERE action = 'Login' AND status = 'Success' " +
                     "GROUP BY Users.username ORDER BY login_count DESC";
        executeQuery(sql, rs -> {
            users.append("Username: ").append(rs.getString("username"))
                 .append(" - Successful Logins: ").append(rs.getInt("login_count"))
                 .append("\n");
        });
        JOptionPane.showMessageDialog(null, users.toString(), "Most Active Users", JOptionPane.INFORMATION_MESSAGE);
    }
    
    public static void filterLogsByDate(String startDate, String endDate) {
        StringBuilder logs = new StringBuilder();
        executeQuery("SELECT * FROM AccessLogs WHERE access_time BETWEEN ? AND ?", rs -> {
            logs.append(displayLog(rs)).append("\n");
        }, startDate, endDate);
        JOptionPane.showMessageDialog(null, logs.toString(), "Logs Filtered by Date", JOptionPane.INFORMATION_MESSAGE);
    }
    
    public static void filterLogsByOutcome(String outcome) {
        StringBuilder logs = new StringBuilder();
        // Convert the outcome to lower case for case-insensitive comparison
        String lowerCaseOutcome = outcome.toLowerCase();

        String sql = "SELECT * FROM AccessLogs WHERE LOWER(status) = ?";
        executeQuery(sql, rs -> logs.append(displayLog(rs)).append("\n"), lowerCaseOutcome);
        JOptionPane.showMessageDialog(null, logs.toString(), "Logs Filtered by Outcome", JOptionPane.INFORMATION_MESSAGE);
    }

    // Helper methods
    private static boolean executeUpdate(String sql, String... params) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            for (int i = 0; i < params.length; i++) {
                pstmt.setString(i + 1, params[i]);
            }
            int rowsAffected = pstmt.executeUpdate();
            return rowsAffected > 0;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error executing update: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private static void executeQuery(String sql, ResultSetHandler handler, String... params) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            for (int i = 0; i < params.length; i++) {
                pstmt.setString(i + 1, params[i]);
            }
            ResultSet rs = pstmt.executeQuery();
            if (!rs.isBeforeFirst()) {
                JOptionPane.showMessageDialog(null, "No logs found.", "Information", JOptionPane.INFORMATION_MESSAGE);
            } else {
                while (rs.next()) {
                    handler.handle(rs);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error retrieving data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private static String displayLog(ResultSet rs) throws SQLException {
        return "Log ID: " + rs.getInt("id") +
               ", User ID: " + rs.getInt("user_id") +
               ", Access Time: " + rs.getString("access_time") +
               ", Status: " + rs.getString("status") +
               ", Action: " + rs.getString("action") +
               ", IP Address: " + rs.getString("ip_address");
    }

    @FunctionalInterface
    private interface ResultSetHandler {
        void handle(ResultSet rs) throws SQLException;
    }
}
