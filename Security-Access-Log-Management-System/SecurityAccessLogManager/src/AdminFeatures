import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class AdminFeatures {

    private static final String DB_URL = "jdbc:sqlite:database/security_logs.db";

    // Method to view all access logs
    public static void viewAllLogs() {
        executeQuery("SELECT * FROM AccessLogs", rs -> displayLog(rs));
    }

    // Method to delete a user by username
    public static boolean deleteUser(String username) {
        return executeUpdate("DELETE FROM Users WHERE username = ?", username);
    }

    // Method to view all users
    public static void viewAllUsers() {
        executeQuery("SELECT * FROM Users", rs -> {
            System.out.println("User ID: " + rs.getInt("id"));
            System.out.println("Username: " + rs.getString("username"));
            System.out.println("Role: " + rs.getString("role"));
            System.out.println("----------------------------");
        });
    }

    // Method to add a new user
    public static void addUser(String username, String password, String role) {
        String hashedPassword = AuthManager.hashPassword(password);
        executeUpdate("INSERT INTO Users(username, password, role) VALUES(?, ?, ?)", username, hashedPassword, role);
        System.out.println("User added successfully");
    }

    // Method to update a user's role
    public static boolean updateUserRole(String username, String newRole) {
        return executeUpdate("UPDATE Users SET role = ? WHERE username = ?", newRole, username);
    }

    // Filter logs by user
    public static void filterLogsByUser(String username) {
        String sql = "SELECT * FROM AccessLogs WHERE user_id = (SELECT id FROM Users WHERE username = ?)";
        executeQuery(sql, rs -> displayLog(rs), username);
    }

    // Filter logs by action type
    public static void filterLogsByActionType(String action) {
        executeQuery("SELECT * FROM AccessLogs WHERE action = ?", rs -> displayLog(rs), action);
    }

    public static void displayLoginStatistics() {
        String sql = "SELECT COUNT(*) AS login_count, DATE(access_time) AS login_date " +
                     "FROM AccessLogs WHERE action = 'Login' AND status = 'Success' " +
                     "GROUP BY login_date ORDER BY login_date DESC";
        executeQuery(sql, rs -> {
            System.out.println("Date: " + rs.getString("login_date") + 
                               " - Successful Logins: " + rs.getInt("login_count"));
        });
    }
    
    public static void displayMostActiveUsers() {
        String sql = "SELECT Users.username, COUNT(*) AS login_count " +
                     "FROM AccessLogs " +
                     "JOIN Users ON AccessLogs.user_id = Users.id " +
                     "WHERE action = 'Login' AND status = 'Success' " +
                     "GROUP BY Users.username ORDER BY login_count DESC";
        executeQuery(sql, rs -> {
            System.out.println("Username: " + rs.getString("username") + 
                               " - Successful Logins: " + rs.getInt("login_count"));
        });
    }
    
    public static void filterLogsByDate(String startDate, String endDate) {
        executeQuery("SELECT * FROM AccessLogs WHERE access_time BETWEEN ? AND ?", rs -> displayLog(rs), startDate, endDate);
    }
    
    // Filter logs by outcome (success/failure)
    public static void filterLogsByOutcome(String status) {
        executeQuery("SELECT * FROM AccessLogs WHERE status = ?", rs -> displayLog(rs), status);
    }

    // Helper methods
    private static boolean executeUpdate(String sql, String... params) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            for (int i = 0; i < params.length; i++) {
                pstmt.setString(i + 1, params[i]);
            }
            int rowsAffected = pstmt.executeUpdate();
            return rowsAffected > 0;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
    }

    private static void executeQuery(String sql, ResultSetHandler handler, String... params) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            for (int i = 0; i < params.length; i++) {
                pstmt.setString(i + 1, params[i]);
            }
            ResultSet rs = pstmt.executeQuery();
            if (!rs.isBeforeFirst()) {
                System.out.println("No logs found.");
            } else {
                while (rs.next()) {
                    handler.handle(rs);
                }
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private static void displayLog(ResultSet rs) throws SQLException {
        System.out.println("Log ID: " + rs.getInt("id"));
        System.out.println("User ID: " + rs.getInt("user_id"));
        System.out.println("Access Time: " + rs.getString("access_time"));
        System.out.println("Status: " + rs.getString("status"));
        System.out.println("Action: " + rs.getString("action"));
        System.out.println("IP Address: " + rs.getString("ip_address"));
        System.out.println("----------------------------");
    }

    @FunctionalInterface
    private interface ResultSetHandler {
        void handle(ResultSet rs) throws SQLException;
    }
}
