import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class AdminFeatures {

    private static final String DB_URL = "jdbc:sqlite:database/security_logs.db";

    // Method to view all access logs
    public static void viewAllLogs() {
        String sql = "SELECT * FROM AccessLogs";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                displayLog(rs);
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    // Method to delete a user by username
    public static boolean deleteUser(String username) {
        String sql = "DELETE FROM Users WHERE username = ?";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, username);
            int rowsAffected = pstmt.executeUpdate();

            return rowsAffected > 0;

        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
    }

    // Method to view all users
    public static void viewAllUsers() {
        String sql = "SELECT * FROM Users";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                System.out.println("User ID: " + rs.getInt("id"));
                System.out.println("Username: " + rs.getString("username"));
                System.out.println("Role: " + rs.getString("role"));
                System.out.println("----------------------------");
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    // Method to add a new user
    public static void addUser(String username, String password, String role) {
        String sql = "INSERT INTO Users(username, password, role) VALUES(?, ?, ?)";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, username);
            pstmt.setString(2, AuthManager.hashPassword(password)); // Assuming AuthManager has a method to hash passwords
            pstmt.setString(3, role);
            pstmt.executeUpdate();
            System.out.println("User added successfully");

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    // Method to update a user's role
    public static boolean updateUserRole(String username, String newRole) {
        String sql = "UPDATE Users SET role = ? WHERE username = ?";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, newRole);
            pstmt.setString(2, username);
            int rowsAffected = pstmt.executeUpdate();

            return rowsAffected > 0;

        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
    }

    // Filter logs by user
    public static void filterLogsByUser(String username) {
        String sql = "SELECT * FROM AccessLogs WHERE user_id = (SELECT id FROM Users WHERE username = ?)";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, username);
            ResultSet rs = pstmt.executeQuery();

            if (!rs.isBeforeFirst()) {
                System.out.println("No logs found for the user: " + username);
            }

            while (rs.next()) {
                displayLog(rs);
            }

        } catch (Exception e) {
            System.out.println("Error filtering logs by user: " + e.getMessage());
        }
    }

    // Filter logs by action type
    public static void filterLogsByActionType(String action) {
        String sql = "SELECT * FROM AccessLogs WHERE action = ?";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, action);
            ResultSet rs = pstmt.executeQuery();

            if (!rs.isBeforeFirst()) {
                System.out.println("No logs found for the action type: " + action);
            }

            while (rs.next()) {
                displayLog(rs);
            }

        } catch (Exception e) {
            System.out.println("Error filtering logs by action type: " + e.getMessage());
        }
    }
    public static void displayLoginStatistics() {
        String sql = "SELECT COUNT(*) AS login_count, DATE(access_time) AS login_date " +
                     "FROM AccessLogs WHERE action = 'Login' AND status = 'Success' " +
                     "GROUP BY login_date ORDER BY login_date DESC";
    
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {
    
            while (rs.next()) {
                System.out.println("Date: " + rs.getString("login_date") + 
                                   " - Successful Logins: " + rs.getInt("login_count"));
            }
    
        } catch (Exception e) {
            System.out.println("Error displaying login statistics: " + e.getMessage());
        }
    }
    
    public static void displayMostActiveUsers() {
        String sql = "SELECT Users.username, COUNT(*) AS login_count " +
                     "FROM AccessLogs " +
                     "JOIN Users ON AccessLogs.user_id = Users.id " +
                     "WHERE action = 'Login' AND status = 'Success' " +
                     "GROUP BY Users.username ORDER BY login_count DESC";
    
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {
    
            System.out.println("Most Active Users:");
            System.out.println("---------------------------");
            while (rs.next()) {
                System.out.println("Username: " + rs.getString("username") + 
                                   " - Successful Logins: " + rs.getInt("login_count"));
            }
            System.out.println("---------------------------");
    
        } catch (Exception e) {
            System.out.println("Error displaying most active users: " + e.getMessage());
        }
    }
    
    public static void filterLogsByDate(String startDate, String endDate) {
        String sql = "SELECT * FROM AccessLogs WHERE access_time BETWEEN ? AND ?";
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, startDate);
            pstmt.setString(2, endDate);
            ResultSet rs = pstmt.executeQuery();
    
            if (!rs.isBeforeFirst()) {
                System.out.println("No logs found for the given date range.");
            }
    
            while (rs.next()) {
                displayLog(rs);
            }
        } catch (Exception e) {
            System.out.println("Error filtering logs by date: " + e.getMessage());
        }
    }
    
    // Filter logs by outcome (success/failure)
    public static void filterLogsByOutcome(String status) {
        String sql = "SELECT * FROM AccessLogs WHERE status = ?";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, status);
            ResultSet rs = pstmt.executeQuery();

            if (!rs.isBeforeFirst()) {
                System.out.println("No logs found for the outcome: " + status);
            }

            while (rs.next()) {
                displayLog(rs);
            }

        } catch (Exception e) {
            System.out.println("Error filtering logs by outcome: " + e.getMessage());
        }
    }

    // Method to display log entry
    private static void displayLog(ResultSet rs) throws SQLException {
        System.out.println("Log ID: " + rs.getInt("id"));
        System.out.println("User ID: " + rs.getInt("user_id"));
        System.out.println("Access Time: " + rs.getString("access_time"));
        System.out.println("Status: " + rs.getString("status"));
        System.out.println("Action: " + rs.getString("action"));
        System.out.println("IP Address: " + rs.getString("ip_address"));
        System.out.println("----------------------------");
    }
}
