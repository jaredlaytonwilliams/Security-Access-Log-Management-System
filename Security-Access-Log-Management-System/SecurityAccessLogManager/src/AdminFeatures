import java.io.File;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminFeatures {

    private static final String DB_URL = "jdbc:sqlite:database/security_logs.db";

    // Method to view all access logs
    public static void viewAllLogs() {
        String sql = "SELECT * FROM AccessLogs";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                System.out.println("Log ID: " + rs.getInt("id"));
                System.out.println("User ID: " + rs.getInt("user_id"));
                System.out.println("Access Time: " + rs.getString("access_time"));
                System.out.println("Status: " + rs.getString("status"));
                System.out.println("Action: " + rs.getString("action"));
                System.out.println("IP Address: " + rs.getString("ip_address"));
                System.out.println("----------------------------");
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    // Method to delete a user by username
    public static boolean deleteUser(String username) {
        String sql = "DELETE FROM Users WHERE username = ?";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, username);
            int rowsAffected = pstmt.executeUpdate();

            return rowsAffected > 0;

        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
    }

    // Method to view all users
    public static void viewAllUsers() {
        String sql = "SELECT * FROM Users";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                System.out.println("User ID: " + rs.getInt("id"));
                System.out.println("Username: " + rs.getString("username"));
                System.out.println("Role: " + rs.getString("role"));
                System.out.println("----------------------------");
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    // Method to add a new user
    public static void addUser(String username, String password, String role) {
        String sql = "INSERT INTO Users(username, password, role) VALUES(?, ?, ?)";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, username);
            pstmt.setString(2, AuthManager.hashPassword(password)); // Assuming AuthManager has a method to hash passwords
            pstmt.setString(3, role);
            pstmt.executeUpdate();
            System.out.println("User added successfully");

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    // Method to update a user's role
    public static boolean updateUserRole(String username, String newRole) {
        String sql = "UPDATE Users SET role = ? WHERE username = ?";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, newRole);
            pstmt.setString(2, username);
            int rowsAffected = pstmt.executeUpdate();

            return rowsAffected > 0;

        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
    }

    public static List<Map<String, String>> filterLogsByDate(String startDate, String endDate) {
    String sql = "SELECT * FROM AccessLogs WHERE access_time BETWEEN ? AND ?";
    List<Map<String, String>> resultList = new ArrayList<>();

    try (Connection conn = DriverManager.getConnection(DB_URL);
         PreparedStatement pstmt = conn.prepareStatement(sql)) {
        pstmt.setString(1, startDate);
        pstmt.setString(2, endDate);
        ResultSet rs = pstmt.executeQuery();

        // Store rows in the list
        while (rs.next()) {
            Map<String, String> row = new HashMap<>();
            row.put("id", String.valueOf(rs.getInt("id")));
            row.put("user_id", String.valueOf(rs.getInt("user_id")));
            row.put("access_time", rs.getString("access_time"));
            row.put("status", rs.getString("status"));
            row.put("action", rs.getString("action"));
            row.put("ip_address", rs.getString("ip_address"));
            resultList.add(row);
        }

        System.out.println("Rows found: " + resultList.size());
    } catch (Exception e) {
        System.out.println("Error filtering logs by date: " + e.getMessage());
    }

    return resultList;
}

    
    
    
    

    public static void generateReportByDate(String startDate, String endDate) {
        String sql = "SELECT * FROM AccessLogs WHERE access_time BETWEEN ? AND ?";
        
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, startDate);
            pstmt.setString(2, endDate);
            ResultSet rs = pstmt.executeQuery();
            
            boolean hasData = false;
            while (rs.next()) {
                hasData = true;
                System.out.println("Log ID: " + rs.getInt("id"));
                System.out.println("User ID: " + rs.getInt("user_id"));
                System.out.println("Access Time: " + rs.getString("access_time"));
                System.out.println("Status: " + rs.getString("status"));
                System.out.println("Action: " + rs.getString("action"));
                System.out.println("IP Address: " + rs.getString("ip_address"));
                System.out.println("----------------------------");
            }
            
            if (!hasData) {
                System.out.println("No logs found for the given date range.");
            }
        } catch (Exception e) {
            System.out.println("Error generating report: " + e.getMessage());
        }
    }
    
    

    
    public static void exportReportToCSV(String filename, ResultSet rs) {
        try (PrintWriter writer = new PrintWriter(new File(filename))) {
            writer.println("Log ID,User ID,Access Time,Status,Action,IP Address");
            
            while (rs.next()) {
                writer.println(rs.getInt("id") + "," +
                               rs.getInt("user_id") + "," +
                               rs.getString("access_time") + "," +
                               rs.getString("status") + "," +
                               rs.getString("action") + "," +
                               rs.getString("ip_address"));
            }
            
            System.out.println("Report exported to " + filename);
        } catch (Exception e) {
            System.out.println("Error exporting report: " + e.getMessage());
        }
    }
    

public static void displayLoginStatistics() {
    String sql = "SELECT COUNT(*) AS login_count, DATE(access_time) AS login_date " +
                 "FROM AccessLogs WHERE action = 'Login' AND status = 'Success' " +
                 "GROUP BY login_date ORDER BY login_date DESC";
    
    try (Connection conn = DriverManager.getConnection(DB_URL);
         PreparedStatement pstmt = conn.prepareStatement(sql);
         ResultSet rs = pstmt.executeQuery()) {
        
        while (rs.next()) {
            System.out.println("Date: " + rs.getString("login_date") + 
                               " - Successful Logins: " + rs.getInt("login_count"));
        }
        
    } catch (Exception e) {
        System.out.println("Error displaying login statistics: " + e.getMessage());
    }
}

}
